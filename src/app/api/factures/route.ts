import { NextResponse } from "next/server";
import prisma from "@/lib/db";

export async function GET() {
  console.log("üîç D√©but de la requ√™te GET /api/factures");
  try {
    // R√©cup√©rer les factures avec leurs relations
    console.log("üìä R√©cup√©ration des factures depuis la base de donn√©es...");
    const factures = await prisma.factures.findMany({
      select: {
        id: true,
        user_id: true,
        type: true,
        retrocession: true,
        statut_paiement: true,
        created_at: true,
        numero: true,
        relation_id: true,
      },
      orderBy: {
        created_at: 'desc'
      }
    });
    console.log(`‚úÖ ${factures.length} factures r√©cup√©r√©es avec succ√®s`);

    // R√©cup√©rer les informations compl√®tes pour chaque facture
    console.log("üîÑ Enrichissement des donn√©es des factures...");
    const facturesCompletes = [];
    
    for (const facture of factures) {
      try {
        console.log(`üìù Traitement de la facture ID: ${facture.id}`);
        
        // R√©cup√©rer les informations de l'utilisateur
        let user = null;
        try {
          if (facture.user_id) {
            console.log(`üë§ R√©cup√©ration des informations de l'utilisateur ID: ${facture.user_id}`);
            user = await prisma.utilisateurs.findUnique({
              where: { id: facture.user_id },
              select: { prenom: true, nom: true }
            });
            console.log(`‚úÖ Informations utilisateur r√©cup√©r√©es: ${user?.prenom} ${user?.nom}`);
          } else {
            console.log("‚ö†Ô∏è Pas d'ID utilisateur associ√© √† cette facture");
          }
        } catch (userError) {
          console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur: ${userError}`);
          user = null;
        }

        // R√©cup√©rer les informations de la relation contrat
        let propertyInfo = null;
        try {
          if (facture.relation_id) {
            console.log(`üîó R√©cup√©ration de la relation contrat ID: ${facture.relation_id}`);
            const relation = await prisma.relations_contrats.findUnique({
              where: { id: facture.relation_id },
              select: { contrat_id: true }
            });

            if (relation) {
              console.log(`üìÑ R√©cup√©ration du contrat ID: ${relation.contrat_id}`);
              // R√©cup√©rer les informations du contrat et de la propri√©t√© associ√©e
              const contrat = await prisma.contrats.findUnique({
                where: { id: relation.contrat_id },
                select: {
                  id: true,
                  property: {
                    select: {
                      numero_mandat: true
                    }
                  }
                }
              });

              if (contrat && contrat.property) {
                console.log(`üè† Propri√©t√© trouv√©e avec num√©ro de mandat: ${contrat.property.numero_mandat}`);
                propertyInfo = {
                  numero_mandat: contrat.property.numero_mandat
                };
              } else {
                console.log("‚ö†Ô∏è Pas de propri√©t√© associ√©e √† ce contrat");
              }
            } else {
              console.log("‚ö†Ô∏è Relation contrat non trouv√©e");
            }
          } else {
            console.log("‚ö†Ô∏è Pas de relation_id associ√© √† cette facture");
          }
        } catch (propertyError) {
          console.error(`‚ùå Erreur lors de la r√©cup√©ration des informations de propri√©t√©: ${propertyError}`);
          propertyInfo = null;
        }

        // Construire l'objet facture complet
        const factureComplete = {
          ...facture,
          conseiller: user ? {
            prenom: user.prenom || "",
            nom: user.nom || ""
          } : { prenom: "", nom: "" },
          propriete: propertyInfo
        };
        
        facturesCompletes.push(factureComplete);
        console.log(`‚úÖ Facture ID: ${facture.id} trait√©e avec succ√®s`);
      } catch (factureError) {
        console.error(`‚ùå Erreur lors du traitement de la facture ID ${facture.id}: ${factureError}`);
        // Continuer avec la facture suivante
      }
    }

    console.log(`‚úÖ Traitement termin√© pour ${facturesCompletes.length} factures`);
    return NextResponse.json(facturesCompletes, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des factures :", error);
    // Afficher plus de d√©tails sur l'erreur
    if (error instanceof Error) {
      console.error("Message d'erreur:", error.message);
      console.error("Stack trace:", error.stack);
    }
    return NextResponse.json(
      { error: "Erreur interne du serveur.", details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}
